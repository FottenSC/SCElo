const fs = require('fs');
const path = require('path');

// Read CSV file
const csvPath = path.join(__dirname, 'supabase', 'sampleData.csv');
const csvContent = fs.readFileSync(csvPath, 'utf-8');

// Parse CSV
const lines = csvContent.trim().split('\n');
const headers = lines[0].split(',');
const data = lines.slice(1).filter(line => line.trim().length > 0);

// Parse and sort data by OrderBy column
const parsedData = data.map((line) => {
  // Split by comma, handling quoted values
  const parts = line.match(/(".*?"|[^",]+)(?=\s*,|\s*$)/g);
  if (!parts || parts.length < 7) return null;
  
  const orderBy = parseInt(parts[0].trim()) || 0;
  const player1 = parts[1].replace(/^"+|"+$/g, '').replace(/'/g, "''").trim();
  const player2 = parts[2].replace(/^"+|"+$/g, '').replace(/'/g, "''").trim();
  const player1_score = parts[3].trim();
  const player2_score = parts[4].trim();
  const event = parts[5].replace(/^"+|"+$/g, '').trim();
  const winner = parts[6].replace(/^"+|"+$/g, '').replace(/'/g, "''").trim();
  
  return { orderBy, player1, player2, player1_score, player2_score, event, winner };
}).filter(v => v !== null);

// Sort by OrderBy column in ASCENDING order so oldest matches get lowest IDs
// This ensures match IDs follow chronological order (oldest = ID 1, newest = highest ID)
parsedData.sort((a, b) => a.orderBy - b.orderBy);

// Extract unique events and create season names
const events = [...new Set(parsedData.map(match => match.event))];
const eventToSeasonId = {};
events.forEach((event, idx) => {
  eventToSeasonId[event] = idx + 1; // Season IDs: 1, 2, 3, etc. for archived seasons
});

// Generate SQL values with match_order from OrderBy
const values = parsedData.map((match, idx) => {
  const seasonId = eventToSeasonId[match.event];
  return `  (${match.orderBy}, '${match.player1}','${match.player2}',${match.player1_score},${match.player2_score},'${match.event}','${match.winner}', ${seasonId})`;
});

// Generate seed.sql file
const sqlContent = `--   CRITICAL: This script is generated by generate-seed.cjs do not modify this script directly.



-- Seed data generated from sampleData.csv
-- Total matches: ${values.length}
-- Total events: ${events.length}
-- Historical data: archived seasons (IDs 1-${events.length})
-- New active season: ID 0

DO $$
BEGIN
  DROP TABLE IF EXISTS seeddata;
  CREATE TEMP TABLE seeddata(
    row_index INT,
    player1 varchar(128),
    player2 varchar(128),
    player1score INT,
    player2score INT,
    event varchar(128),
    winner varchar(128),
    season_id INT
  );

  INSERT INTO seeddata (row_index, player1, player2, player1score, player2score, event, winner, season_id) 
  VALUES
  ${values.join(',\n  ')};

  -- Create archived seasons for historical data (IDs 1-${events.length})
${events.map((event, idx) => `  INSERT INTO seasons(id, name, status, start_date, description)
  VALUES (${idx + 1}, '${event}', 'archived', NOW(), 'Historical season: ${event}')
  ON CONFLICT(id) DO UPDATE SET status = 'archived';`).join('\n')}

  -- Create new active season (ID 0) - CRITICAL: Ensure it is marked as active (status='active')
  -- This must DELETE and re-INSERT to override any existing record
  DELETE FROM seasons WHERE id = 0;
  INSERT INTO seasons(id, name, status, start_date, description)
  VALUES (0, 'Active Season', 'active', NOW(), 'Current active season');
  
  -- Ensure ALL other seasons are archived (not active)
  UPDATE seasons SET status = 'archived' WHERE id != 0;

  -- Insert unique events
  INSERT INTO events(title, event_date)
  SELECT DISTINCT event, NOW()
    FROM seeddata
  WHERE 
    NOT EXISTS(
      SELECT 1
      FROM events AS E
      WHERE E.title = seeddata.event
    )
  ORDER BY event;

  -- Insert unique players (all with NULL ratings initially)
  INSERT INTO players(name)
  SELECT DISTINCT name
    FROM (
      SELECT player1 as name FROM seeddata
      UNION SELECT player2 FROM seeddata
    ) AS T
  WHERE 
    NOT EXISTS(
      SELECT 1
      FROM players AS P
      WHERE P.name = T.name
    );

  -- Update player twitter profiles
  UPDATE players SET twitter = 'unicorn_cz' WHERE name = 'Unicorn';
  UPDATE players SET twitter = 'SC_MercyMainBTW' WHERE name = 'MercyMainBTW';
  UPDATE players SET twitter = 'Taokaka__Meow' WHERE name = 'Taokaka Meow';
  UPDATE players SET twitter = 'simon95lb' WHERE name = 'The Arpeggiator';
  UPDATE players SET twitter = 'yangin_pikapi' WHERE name = 'Pikapi';
  UPDATE players SET twitter = 'Winterwander' WHERE name = 'HawkOfGP';
  UPDATE players SET twitter = 'HolyCarpSC' WHERE name = 'HolyCarp';
  UPDATE players SET twitter = 'PyrrhoZaydan' WHERE name = 'Zaydan';
  UPDATE players SET twitter = 'Myloes_' WHERE name = 'Myloes';
  UPDATE players SET twitter = 'NeonFGC' WHERE name = 'Neon';
  UPDATE players SET twitter = 'MPhantasmF' WHERE name = 'MPhantasm';
  UPDATE players SET twitter = 'Aarpia1' WHERE name = 'Aarpia';
  UPDATE players SET twitter = 'Skyll_13' WHERE name = 'Skyll';
  UPDATE players SET twitter = 'Aelz9' WHERE name = 'Aelz';
  UPDATE players SET twitter = 'Darxity_' WHERE name = 'Darxy';
  UPDATE players SET twitter = 'D3xusSC' WHERE name = 'D3xus';
  UPDATE players SET twitter = 'SiloZen' WHERE name = 'SiloZen';
  UPDATE players SET twitter = 'Blade_of_Flame' WHERE name = 'Blade of Flame';
  UPDATE players SET twitter = 'DarkWraithZER0' WHERE name = 'ZER0';
  UPDATE players SET twitter = 'habaduba' WHERE name = 'Habaduba';
  UPDATE players SET twitter = 'SirRefined' WHERE name = 'SomethingRefined';
  UPDATE players SET twitter = 'FottenSC' WHERE name = 'Fotten';
  UPDATE players SET twitter = 'Ssylus1' WHERE name = 'Ssylus';
  UPDATE players SET twitter = 'Nashl3y' WHERE name = 'Nashley';
  UPDATE players SET twitter = 'Lyonide' WHERE name = 'Lyonide';
  UPDATE players SET twitter = 'WorldBranstar' WHERE name = 'WorldBranstar';
  UPDATE players SET twitter = 'lozkias' WHERE name = 'LozKias';
  UPDATE players SET twitter = 'ganondeurfT' WHERE name = 'Ganondeurf';

  -- Insert match data with appropriate season_id (historical matches to archived seasons)
  INSERT INTO matches(
    player1_id, player1_score,
    player2_id, player2_score, 
    winner_id, event_id, 
    match_order,
    season_id
  )
  SELECT
    P1.id, S.player1score,
    P2.id, S.player2score,
    W.id,
    E.id,
    S.row_index,
    S.season_id
  FROM seeddata as S
  INNER JOIN players AS P1 ON P1.name = S.player1
  INNER JOIN players AS P2 ON P2.name = S.player2
  INNER JOIN players AS W ON W.name = S.winner
  INNER JOIN events AS E ON E.title = S.event
  ORDER BY S.row_index;

  DROP TABLE seeddata;

  UPDATE matches
  SET vod_link = 'https://www.youtube.com/shorts/IZMaHVVIObs';

  UPDATE events
  SET vod_link = 'https://youtu.be/1sFbLppuhhs?si=JUlABkFdrF5MYYvy';
END $$;
`;

// Write to seed.sql
const outputPath = path.join(__dirname, 'supabase', 'seed.sql');
fs.writeFileSync(outputPath, sqlContent);

console.log(`✓ Generated seed.sql with ${values.length} historical matches`);
console.log(`✓ Created ${events.length} archived seasons (IDs 1-${events.length}):`);
